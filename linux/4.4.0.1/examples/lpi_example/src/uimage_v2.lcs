/*linker script to add new note section in the shared object */

OUTPUT_FORMAT("elf32-littlehexagon", "elf32-littlehexagon",
	      "elf32-littlehexagon")
OUTPUT_ARCH(hexagon)

PHDRS {
phdr1 PT_NULL FILEHDR PHDRS;
phdr2 PT_LOAD;
phdr3 PT_LOAD;
dynamic1 PT_DYNAMIC;
note1 PT_NOTE;
}

SECTIONS
{

  /* micro-image version note */
  .note.qti.uimg.dl.ver ALIGN(4K): { *(.note.qti.uimg.dl.ver) } : phdr2 : note1

  /* SysV hash section */
  .hash           :  { *(.hash) } : phdr2

  /* GNU hash section */
  .gnu.hash       :  { *(.gnu.hash) }

  /* Dynamic Symbol Table section */
  .dynsym         :  { *(.dynsym) }

  /* Dynamic string table section */
  .dynstr         :  { *(.dynstr) }

  /* Dynamic relocations for data */
  .rela.dyn       :  { *(.rela.dyn) }

  /* Dynamic relocations for PLT */
  .rela.plt       :  { *(.rela.plt) }

  /* Initializer */
  .init           :
  {
    KEEP (*(.init))
  }

  /* Procedure Linkage table */
  .plt            :  { *(.plt) }

  /* Text section */
  .text           :
  {
    *(.text*)
  }

  /* Finalizer section */
  .fini           :
  {
    KEEP (*(.fini))
  }

  /* Standard symbols for Text */
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);

  /* Read Only Data */
  .rodata         : { *(.rodata*) }

  /* EH Frame Information */
  .eh_frame_hdr   :  { *(.eh_frame_hdr) }
  .eh_frame       :  ONLY_IF_RO { KEEP (*(.eh_frame)) }

   /* TLS */
  .tdata	  :  { *(.tdata*) }
  .tbss		  :  { *(.tbss*)  }

  /* Constructors and Destructors */
  .init_array     :  { KEEP (*(.init_array)) }
  .fini_array     :  { KEEP (*(.fini_array.*)) }
  .ctors          : { KEEP (*(.ctors)) }
  .dtors          : { KEEP (*(.dtors)) }


  .data.rel.ro    :  { *(.data.rel.ro*) }

  . = ALIGN(4K);

   /* Dynamic Sections */
  .dynamic        :  { *(.dynamic) } : dynamic1 : phdr3

   /* GOT section */
  .got            :  { *(.got) }

  /* GOT slots for PLT section  */
  .got.plt        :  { *(.got.plt) }

  .data           :
  {
    *(.data .data.*)
  }
  _edata = .; PROVIDE (edata = .);

  /* BSS */
  __bss_start = .;
  .bss            :
  {
   *(.bss*)
   *(COMMON)
  }
  . = ALIGN (64);
  _end = .;

  /* Non alloc sections */
  PROVIDE (end = .);
  .comment       0 :  { *(.comment) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 :  { *(.debug_srcinfo) }
  .debug_sfnames  0 :  { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 :  { *(.debug_aranges) }
  .debug_pubnames 0 :  { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 :  { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 :  { *(.debug_abbrev) }
  .debug_line     0 :  { *(.debug_line) }
  .debug_frame    0 :  { *(.debug_frame) }
  .debug_str      0 :  { *(.debug_str) }
  .debug_loc      0 :  { *(.debug_loc) }
  /* DWARF 3 */
  .debug_pubtypes 0 :  { *(.debug_pubtypes) }
  .debug_ranges   0 :  { *(.debug_ranges) }
}
