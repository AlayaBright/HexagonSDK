from __future__ import print_function
import lldb


def __lldb_init_module(debugger, dict):
    debugger.HandleCommand('command script add -f hmx_utils.hmx_read hmx_read')
    print("HMX utilities (hmx_read) loaded")


def hmx_read (debugger, register, result, dict):
    """
  This command will read and return the current HMX accumulator data
    """

    l_found = False
    offset = 0
    hmx_data = ""
    while (not l_found):
        debugger.GetCommandInterpreter().HandleCommand('process plugin packet send "qXfer:osdata:read:hmxdata:' + \
                                       '{:x}'.format(offset) + ',200"', result)
        output = result.GetOutput()
        result.Clear()
        output_offset = output.find("response: ") + 10
        cur_line = output[output_offset:len(output) - 1]  # -1 to remove \n
        offset += len(cur_line) - 1
        if cur_line[0] == 'l':
            l_found = True
        hmx_data += cur_line[1:]

    hmx_data_out = "HMX accumulator data:\n"
    hmx_addr = 0
    offset = 0
    word_num = 0
    while len(hmx_data[offset:]) > 0:
        if word_num == 0:
            hmx_data_out += '{:08x}:'.format(hmx_addr)
            hmx_addr += 16
        hmx_data_out += '  0x' + hmx_data[offset:offset+8]
        offset += 8
        word_num += 1
        if word_num == 4:
            word_num = 0
            hmx_data_out += '\n'

    print(hmx_data_out, file=result)
    result.SetStatus(lldb.eReturnStatusSuccessFinishResult)

