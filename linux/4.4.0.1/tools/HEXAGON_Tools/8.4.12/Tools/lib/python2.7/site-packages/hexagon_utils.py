from __future__ import print_function
import lldb
import xml.dom.minidom as dom
import os


def __lldb_init_module(debugger, dict):
    debugger.HandleCommand(
        'command script add -f hexagon_utils.pagetable_read pagetable')
    debugger.HandleCommand('command script add -f hexagon_utils.tlb_read tlb')
    debugger.HandleCommand('command script add -f hexagon_utils.pv8 pv8')
    debugger.HandleCommand('command script add -f hexagon_utils.pv16 pv16')
    debugger.HandleCommand('command script add -f hexagon_utils.pv32 pv32')
    print("Hexagon utilities (pagetable, tlb, pv) loaded")

    site_packages = lldb.SBHostOS.GetLLDBPythonPath()

    # Load the SDK's hexagon_debugger_utils.py file.
    # First, look in the environment variable DEBUGGER_UTILS .
    # This can be a directory, or a path to the file.
    # If it doesn't end in 'hexagon_debugger_utils.py', treat it as a directory.
    # If the resulting file doesn't exist, look for it in site-packages.
    debugger_utils_path = os.getenv('DEBUGGER_UTILS')
    if debugger_utils_path:
        debugger_utils = lldb.SBFileSpec(debugger_utils_path)
    else:
        debugger_utils = lldb.SBFileSpec()
    if debugger_utils.GetFilename() != 'hexagon_debugger_utils.py':
        debugger_utils.AppendPathComponent('hexagon_debugger_utils.py')
    if debugger_utils.Exists():
        print('command script import ' + debugger_utils.__get_fullpath__())
        debugger.HandleCommand('command script import ' +
            debugger_utils.__get_fullpath__())
    else:
        site_packages.SetFilename('hexagon_debugger_utils.py')
        if site_packages.Exists():
            debugger.HandleCommand('command script import ' +
                os.path.splitext(site_packages.GetFilename())[0])

    site_packages.SetFilename('hexagon_tvm_utils.py')
    if site_packages.Exists():
        debugger.HandleCommand('command script import ' +
            os.path.splitext(site_packages.GetFilename())[0])

    site_packages.SetFilename('hexagon_dbg_ext.py')
    if site_packages.Exists():
        debugger.HandleCommand('command script import ' +
            os.path.splitext(site_packages.GetFilename())[0])


def print_xml_table(root, result):
    itemlist = root.getElementsByTagName('item')
    if (not itemlist):
        print("Error: no data received", file=result)
        return
    line = ""
    for column in itemlist[0].getElementsByTagName('column'):
        line += '%10s' % column.getAttribute('name')
    print(str(line), file=result)
    for item in itemlist:
        line = ""
        for column in item.getElementsByTagName('column'):
            line += '%10s' % column.childNodes[0].nodeValue
        print(str(line), file=result)


def pagetable_read(debugger, register, result, dict):
    """
  Read pagetable info from the remote target
    """

    xml_root = page_tlb_read(debugger, "qXfer:osdata:read:pagetable:", result)
    if (xml_root is not None):
        print_xml_table(xml_root, result)
        result.SetStatus(lldb.eReturnStatusSuccessFinishResult)
    else:
        result.SetStatus(lldb.eReturnStatusFailed)


def tlb_read(debugger, register, result, dict):
    """
  Read tlb info from the remote target
    """

    xml_root = page_tlb_read(debugger, "qXfer:osdata:read:tlbinfo:", result)
    if (xml_root is not None):
        print_xml_table(xml_root, result)
        result.SetStatus(lldb.eReturnStatusSuccessFinishResult)
    else:
        result.SetStatus(lldb.eReturnStatusFailed)


def page_tlb_read(debugger, rsp_string, result):
    l_found = False
    offset = 0
    xml_string = ""
    while (not l_found):
        debugger.GetCommandInterpreter().HandleCommand('process plugin packet send "' + \
                                       rsp_string + '{:x}'.format(offset) + ',2bb"', result)
        output = result.GetOutput()
        result.Clear()
        output_offset = output.find("response: ") + 10
        cur_line = output[output_offset:len(output)].rstrip('\n')
        offset += len(cur_line) - 1
        if (cur_line[0] == 'l' or cur_line.find('ERROR:') >= 0 or
            cur_line.find('error:') >= 0):
            l_found = True
        xml_string += cur_line[1:]
    try:
        xml_root = dom.parseString(xml_string)
    except:
        print(xml_string)
        result.SetError("Unable to parse xml data from server!")
        result.SetStatus(lldb.eReturnStatusFailed)
        return None
    return xml_root


def pv(debugger, register, result, size):
    result.Clear()
    if (not register):
        result.SetError("must specify a vector register")
        result.SetStatus(lldb.eReturnStatusFailed)
        return
    if (not register[0] in 'qQvVzZ'):
        result.SetError("register " + register + " is not a vector register")
        result.SetStatus(lldb.eReturnStatusFailed)
        return
    res = lldb.SBCommandReturnObject()
    debugger.GetCommandInterpreter().HandleCommand('re r ' + register, res)
    if (len(res.GetError()) > 0):
        result.SetError(res.GetError().split("error: ")[1].rstrip('\n'))
        result.SetStatus(lldb.eReturnStatusFailed)
        return
    output = res.GetOutput()
    output_offset = output.find("0x") + 2
    line = register + " ="
    temp_regval = output[output_offset:len(output) - 1]
    numbytes = size // 8
    vector_length = len(temp_regval) // 2
    for index in range(0, vector_length // numbytes):
        printme = temp_regval[0:numbytes * 2]
        line += " 0x" + printme
        temp_regval = temp_regval[numbytes * 2:]
    result.PutCString('%s' % line)


def pv8(debugger, register, result, dict):
    """
  Print the given vector register as 8 bit values

Example:
  pv8 v0
will print v0 as hex bytes.
    """

    pv(debugger, register, result, 8)


def pv16(debugger, register, result, dict):
    """
  Print the given vector register as 16 bit values

Example:
  pv16 v0
will print v0 as hex half words.
    """

    pv(debugger, register, result, 16)


def pv32(debugger, register, result, dict):
    """
  Print the given vector register as 32 bit values

Example:
  pv32 v0
will print v0 as hex words.
    """

    pv(debugger, register, result, 32)
