/* ==================================================================================== */
/*     Copyright (c) 2016-2021 QUALCOMM Technologies, Inc. and/or its subsidiaries.     */
/*                           All Rights Reserved.                                       */
/*                  QUALCOMM Confidential and Proprietary                               */
/* ==================================================================================== */

#ifndef gaussian5x5_SCHEDULE_H
#define gaussian5x5_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=arm-64-android-hvx-hvx_128  // NOLINT
// with machine_params=16,24000000,40

#include "Halide.h"


inline void apply_schedule_gaussian5x5(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(7);
    Func cols = pipeline.get_func(6);
    Func rows = pipeline.get_func(5);
    Func input_16 = pipeline.get_func(4);
    Func bounded_input = pipeline.get_func(3);
    Func repeat_edge = pipeline.get_func(2);
    Func lambda_0 = pipeline.get_func(1);
    Func input_im = pipeline.get_func(0);
    Var x(output.get_schedule().dims()[0].var);
    Var xi("xi");
    Var xii("xii");
    Var y(output.get_schedule().dims()[1].var);
    Var yi("yi");
    Var yii("yii");
    output
        .split(y, y, yi, 34, TailStrategy::ShiftInwards)
        .split(x, x, xi, 384, TailStrategy::ShiftInwards)
        .split(yi, yi, yii, 2, TailStrategy::ShiftInwards)
        .split(xi, xi, xii, 128, TailStrategy::ShiftInwards)
        .unroll(xi)
        .unroll(yii)
        .vectorize(xii)
        .align_storage(x, 128)
        .compute_root()
        .hexagon()
        .reorder({xii, xi, yii, yi, x, y})
        .parallel(y)
        .prefetch(input_im, yi, 2);
    cols
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 64, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(y)
        .vectorize(xi)
        .align_storage(x, 64)
        .compute_at(output, yi)
        .reorder({xi, x, y});
    rows
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 64, TailStrategy::RoundUp)
        .vectorize(xi)
        .align_storage(x, 64)
        .compute_at(output, yi)
        .store_at(output, x)
        .reorder({xi, x, y});
    input_16
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 128, TailStrategy::ShiftInwards)
        .vectorize(xi)
        .align_storage(x, 128)
        .compute_at(output, yi)
        .store_at(output, x)
        .reorder({xi, x, y});

}

#endif  // gaussian5x5_SCHEDULE_H
