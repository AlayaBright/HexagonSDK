#============================================================================
#  Name:
#    defines_hexagon.min
#
#  Description:
#    This file specifies the items necessary to build libraries using the
#    HEXAGON clang toolchain
#
# Copyright (c) 2020 Qualcomm Technologies, Inc.  All Rights Reserved.
#============================================================================
#                             TOOL DEFINITIONS
#============================================================================

# Hexagon Supported Architecture and Hexagon Variant Name
ifeq (,$(filter $(V_ARCH),v65))
   $(error only hexagon v65 supported)
endif

ifeq (,$(HEXAGON_NAME))
   HEXAGON_NAME=hexagon
endif

# Hexagon Tools Directory Setup
HEXAGON_BIN=$(addsuffix /Tools/bin/,$(HEXAGON_TOOLS_ROOT))#
HEXAGON_LIB_DIR=$(HEXAGON_TOOLS_ROOT)/Tools/target/hexagon/lib#
HEXAGON_ISS_DIR=$(HEXAGON_TOOLS_ROOT)/Tools/lib/iss#
HEXAGON_QCC_DIR=$(HEXAGON_LIB_DIR)#

# Libraries from the toolchain
HEXAGON_LIB_PATH=$(HEXAGON_LIB_DIR)/$(V_ARCH)/G0
LIB_HEXAGON=$(HEXAGON_LIB_DIR)/$(V_ARCH)/G0/libhexagon.a
#LIBDL=$(HEXAGON_LIB_DIR)/$(V_ARCH)/G0/libdl.a

# Hexagon Tools Alias
AR=$(HEXAGON_BIN)$(HEXAGON_NAME)-ar#
CC=$(HEXAGON_BIN)$(HEXAGON_NAME)-clang#
CXX=$(HEXAGON_BIN)$(HEXAGON_NAME)-clang++#
LD=$(HEXAGON_BIN)$(HEXAGON_NAME)-clang#
FEZ=$(HEXAGON_BIN)$(HEXAGON_NAME)-size#
STRIP=$(HEXAGON_BIN)$(HEXAGON_NAME)-strip#
SIM=$(HEXAGON_BIN)$(HEXAGON_NAME)-sim#
ASM=$(CXX)#

# Setting extensions
MOD_EXT=.mod1#
EXE_EXT=#
IMG_EXT=#
DLL_EXT=.so#
DLL_LIB_EXT=.so#
LIB_EXT=.a#
IMP_LIB_EXT=.a#

#============================================================================
#                             COMPILER OPTIONS
#============================================================================

# Hexagon Optimization Flags
_OPT=-O0# Does not optimize
ifneq ($(V_FLAVOR),Debug)
   _OPT=-O2# Enables optimizations for performance
endif

# Hexagon Source-level Debug Information
ifneq ($(V_FLAVOR),Release)
_DBG=-g#Generate complete debug info
_DBG_ASM=--gdwarf2#
endif

#Stack protector flags: Generates code which checks selected functions for buffer overflows
ifeq ($(V_FLAVOR),Debug)
   __DBG=-fstack-protector#
endif

# Hexagon Position Independent Code
PIC=-fpic#Set the relocation model to PICs

# Hexagon Compiler flags
CTEMP_FLAGS=\
   -m$(V_ARCH) \
   -c \
   -G0 \
   $(_DBG) \
   $(_OPT) \
   -Wall \
   -Werror \
   -Wstrict-prototypes \
   -Wno-missing-braces \
   -fno-exceptions \
   -fno-strict-aliasing \
   -fno-zero-initialized-in-bss \
   -fdata-sections \
   $(__DBG) \
   $(PIC) \
   -D__V_DYNAMIC__\
   -DTOOLV81#

# Assign the selected Compiler flags to CC and CXX FLAGS
# Adding support for compiling HVX in 128-byte mode by default
CXX_FLAGS=$(CTEMP_FLAGS) $(MHVX_DOUBLE_FLAG)#
CC_FLAGS=$(CTEMP_FLAGS) $(MHVX_DOUBLE_FLAG)#

# Invoke the static program analyzer on an entire program
# TODO: Uncomment the following to enable
#CC_FLAGS +=--compile-and-analyze#
#CXX_FLAGS +=--compile-and-analyze#

DEFINES+=__FILENAME__=\"$(notdir $(<))\"#

CC_NO_WARN_UNUSED_FUNCTIONS=-Wno-unused-functions
CC_INCFLAG=-I#
CC_DEFINEFLAG=-D#
CC_UNDEFINEFLAG=-U#
CC_OUTPUTFLAG=-o #
CC_MIX_OUTPUTFLAG=-o #

# AR_FLAGS
# -r: replace or insert [files] into the archive
# -s: act as ranlib. ranlib generates an index to the contents of an archive and stores it in the archive
# -c: do not warn if archive had to be created
AR_FLAGS=-rsc#
AR_OUTPUTFLAG=#
IMPAR_OUTPUTFLAG=-o #

#============================================================================
#                             LINKER OPTIONS
#============================================================================

LD_FLAG=-Wl,#
_LDFLAG=-Wl,#
LD_LIBDIRFLAG=-L#
LD_OUTPUTFLAG=-o #
LD_VERBOSE=-v#

# strip off path of dependent .so so that DT_NEEDED tag in ELF contains
# absolute path, also relies on dependent .so's listing DT_SONAME
ld_inputs=$(strip \
  $(foreach L,$1,\
    $(if $(filter %$(DLL_EXT),$(notdir $L)),\
        $(_LDFLAG)$L $(_LDFLAG), $L)))

# The linker will only pull in symbols from libhexagon.a if one of the ld_inputs needs it
LD_INPUTS+=$(_LDFLAG)--start-group  $(call ld_inputs,$(1)) $(LIB_HEXAGON) $(_LDFLAG)--end-group#

LD_FLAGS+=\
    -m$(V_ARCH) \
    -G0 \
    $(_LDFLAG)--no-threads#

# Create a wrapper for the specified symbol
LD_FLAGS_WRAP +=\
  $(_LDFLAG)--wrap=malloc \
  $(_LDFLAG)--wrap=calloc \
  $(_LDFLAG)--wrap=free \
  $(_LDFLAG)--wrap=realloc \
  $(_LDFLAG)--wrap=memalign#

SHARED=-shared#Generates a shared object as the output file

DLL_LD_FLAGS+=\
    $(LD_FLAGS) $(PIC) $(SHARED) \
    $(_LDFLAG)-Bsymbolic \
    $(LD_FLAGS_WRAP) \
    -lc \
    $(_LDFLAG)-Map=$(@).map \
    $(_LDFLAG)-soname=$(notdir $(@))

MOD_LD_FLAGS+=$(LD_FLAGS) $(PIC) $(SHARED) $(_LDFLAG)-eIMod_New $(_LDFLAG)-Map=$(@).map#

IMPLIB_LD_FLAGS+=$(LD_FLAGS) $(SHARED)

IMG_LD_FLAGS+=$(LD_FLAGS)

EXE_LD_FLAGS+=\
    $(LD_FLAGS) \
    $(_LDFLAG)--dynamic-linker=\
    $(_LDFLAG)-E \
    $(_LDFLAG)--force-dynamic,-u,main

define IMPLIB_AR_CMD
    $(call exec,$(LD)) $(IMPLIB_LD_FLAGS) $(LD_OUTPUTFLAG)$(2) $(call LD_INPUTS,$(1))
endef

#============================================================================
#                             ASM OPTIONS
#============================================================================

ASM_FLAGS=$(CXX_FLAGS)#
ASM_INCFLAG=$(CC_INCFLAG)#
ASM_DEFINEFLAG=$(CC_DEFINEFLAG)#
ASM_UNDEFINEFLAG=$(CC_UNDEFINEFLAG)#
ASM_OUTPUTFLAG=$(CC_MIX_OUTPUTFLAG)#
ASM_MIX_OUTPUTFLAG=$(CC_MIX_OUTPUTFLAG)#

#============================================================================
#                             SIMULATOR OPTIONS
#============================================================================

# Architecture dependent flag
ifeq ($(V_ARCH), v66)
  SIM_V_ARCH=v66g_1024
else
  SIM_V_ARCH=$(V_ARCH)
endif

# Formulating the simulator command
QEXE_EXEC=$(SIM) -m$(SIM_V_ARCH) --simulated_returnval#
QEXE_EXEC+=--usefs $(OBJ_DIR)#
ifneq ($(V_ARCH),$(filter $(V_ARCH),v65 v66 v67))
QEXE_EXEC+=--statsfile $(V)/stats.txt#
endif

QEXE_EXEC+=--pmu_statsfile $(OBJ_DIR)/pmu_stats.txt

ifeq ($(V_ARCH), v65)
QEXE_EXEC+=--l2tcm_base 0xd800
endif
QEXE_EXEC+=$1 $2 -- $3#

#============================================================================
#                             HVX COMPILER OPTIONS
#============================================================================

# definition of -mhvx-double flag, useful for configuring specific source
# files to be compiled assuming HVX 128-byte mode. Using this variable
# (which should only be defined for tools that support -mhvx-double) helps
# avoid multiple tool version checks in the hexagon.min file.
# example (in a hexagon.min file): scale_hvx_i128_CC_FLAGS +=$(MHVX_DOUBLE_FLAG)
MHVX_DOUBLE_FLAG=-mhvx-double
MHVX_SINGLE_FLAG=-mhvx
# Vectorization flags
AUTOVEC_FLAG=-Rpass=loop-vectorize -fvectorize

### Pull extensions and QuRT Support
$(call INCLUDE_MAKE_D_EXTS,defines_hexagon.min)
include $(QURT_IMAGE_DIR)/qurt_libs_priv.min
